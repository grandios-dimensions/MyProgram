/* * 「アルゴリズムとデータ構造」 * 大規模行列を扱うクラスの実現 * Hirohito Shibata (hshibata@stf.teu.ac.jp) */class SortList {    // リストの先頭位置    public ListItem first = null;    // 要素数    public int count = 0;    // リストのクリア    public void clear() {	first = null;	count = 0;    }    // 要素数を取得    public int getCount() {	return count;    }    // 指定したインデックスの値を設定    public void setValue(int index, double value) {	// 値を 0 に設定する場合は、要素を削除	if (value == 0) {	    delete(index);	    return;	}	// fist==null の場合は先頭に追加	if (first == null) {	    // 先頭に設定	    first = new ListItem(index, value);	    return;	}	if (index < first.index) {	    // 先頭に挿入	    ListItem item = new ListItem(index, value);	    item.next = first;	    first = item;	} else if (index == first.index) {	    // 先頭の値を設定	    first.value = value;	} else {	    // 先頭から2つ目以降に値の設定場所、挿入場所を探す	    ListItem p = first;	    while (p.next != null) {		if (index == p.next.index) {		    p.next.value = value;	// 値の書き換え		    return;		} else if (index < p.next.index) {		    // p と p.next の間に挿入		    ListItem item = new ListItem(index, value);		    ListItem temp = p.next;		    p.next = item;		    item.next = temp;		    return;		}		p = p.next;	// リストの次の項目	    }	    p.next = new ListItem(index, value);	// リストの最後に追加	}    }    // 指定したインデックスの値を取得。なかった場合は0を返す。    public double getValue(int index) {	ListItem p = first;	while (p != null) {	    if (index == p.index) {		return p.value;	// あった	    } else if (index < p.index) {		return 0;	// なかった	    }	    p = p.next;	// リストの次の項目	}	return 0;	// なかった    }    // 指定したインデックスの要素を削除    public void delete(int index) {	if (first != null) {	    if (first.index == index) {		first = first.next;	    } else {		ListItem p = first;		while (p.next != null) {		    if (p.next.index == index) {			p.next = p.next.next;			break;		    }		    p = p.next;		}	    }	}    }    // リストから文字列を生成する    public String toString() {	String text = "";	ListItem p = first;	while (p != null) {	    if (!text.equals("")) {		text += ", ";	    }	    text += String.format("[%d] %f", p.index, p.value);	    p = p.next;	}	return text;    }}