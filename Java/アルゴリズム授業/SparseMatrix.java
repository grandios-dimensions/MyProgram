/* * 「アルゴリズムとデータ構造」 * 大規模行列を扱うクラスの実現 * Hirohito Shibata (hshibata@stf.teu.ac.jp) */class SparseMatrix {    // コンストラクタ (行数と列数を指定)    SparseMatrix(int row, int column) {	row_count = row;	column_count = column;	// リスト配列の初期化	rows = new SortList[row];	for (int i = 0; i < row; i++) {	    rows[i] = new SortList();	}    }    // 行数    private int row_count = 0;    // カラム数    private int column_count = 0;    // 行に対応するリスト配列    private SortList[] rows;    // 行数を取得    public int getRowCount() {	return row_count;    }    // 列数を取得    public int getColumnCount() {	return column_count;    }    // 行 x、列 y の値を設定    public void setValue(int x, int y, double value) {	SortList list = rows[x];	list.setValue(y, value);    }    // 行 x、列 y の値を取得    public double getValue(int x, int y) {	SortList list = rows[x];	return list.getValue(y);    }    // 行要素の総和を取得    public double getRowSum(int x) {	double sum = 0;	SortList list = rows[x];	ListItem p = list.first;	while (p != null) {	    sum += p.value;	    p = p.next;	}	return sum;    }    // 行列要素を文字列にして取得    public String toString() {	String text = "";	for (int x = 0; x < row_count; x++) {	    for (int y = 0; y < column_count; y++) {		int v = (int) getValue(x, y);		text += "  ";		text += v;	    }	    text += "\r\n";	}	return text;    }}